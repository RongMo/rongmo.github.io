<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一人一马一江湖</title>
  <subtitle>愿你可以朝九晚五，又可以浪迹天涯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://loeuy.cn/"/>
  <updated>2017-06-14T10:19:10.302Z</updated>
  <id>http://loeuy.cn/</id>
  
  <author>
    <name>荣嬷嬷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端常见的一些兼容性问题</title>
    <link href="http://loeuy.cn/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://loeuy.cn/移动端常见的一些兼容性问题/</id>
    <published>2017-06-14T10:04:45.000Z</published>
    <updated>2017-06-14T10:19:10.302Z</updated>
    
    <content type="html"><![CDATA[<p>随着手机的普及，移动端的开发也成了一个重要的方向，但由于设备的不统一会造成一些兼容性问题，</p>
<h5 id="1、安卓浏览器看背景图片，有些设备会模糊。"><a href="#1、安卓浏览器看背景图片，有些设备会模糊。" class="headerlink" title="1、安卓浏览器看背景图片，有些设备会模糊。"></a>1、安卓浏览器看背景图片，有些设备会模糊。</h5><p>用同等比例的图片在PC机上很清楚，但是手机上很模糊，原因是什么呢？</p>
<p>经过研究，是devicePixelRatio作怪，因为手机分辨率太小，如果按照分辨率来显示网页，这样字会非常小，所以苹果当初就把iPhone 4的960 <em> 640分辨率，在网页里只显示了480 </em> 320，这样devicePixelRatio＝2。现在android比较乱，有1.5的，有2的也有3的。</p>
<a id="more"></a>
<p>想让图片在手机里显示更为清晰，必须使用2x的背景图来代替img标签（一般情况都是用2倍）。例如一个div的宽高是100 <em> 100，背景图必须得200 </em> 200，然后background-size:contain;，这样显示出来的图片就比较清晰了。</p>
<p>代码可以如下：</p>
<p><code>background:url(../images/icon/all.png) no-repeat center center;</code></p>
<p><code>-webkit-background-size:50px 50px;</code></p>
<p><code>background-size: 50px 50px;display:inline-block; width:100%; height:50px;</code></p>
<p>或者指定 background-size:contain;都可以，大家试试！</p>
<p>#####2、图片加载</p>
<p>若您遇到图片加载很慢的问题，对这种情况，手机开发一般用canvas方法加载：</p>
<p>具体的canvas API 参见：<a href="http://javascript.ruanyifeng.com/htmlapi/canvas.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/htmlapi/canvas.html</a></p>
<p>下面举例说明一个canvas的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">//js动态加载图片和li 总共举例17张图片！</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">vartotal=17; </div><div class="line"></div><div class="line">varzWin=$(window); </div><div class="line"></div><div class="line">varrender=function()&#123;</div><div class="line"></div><div class="line">  varpadding=2; </div><div class="line"></div><div class="line">  varwinWidth=zWin.width(); </div><div class="line"></div><div class="line">  varpicWidth=Math.floor((winWidth-padding*3)/4); </div><div class="line"></div><div class="line">  vartmpl ='';</div><div class="line"></div><div class="line">  for(vari=1;i<span class="tag">&lt;<span class="name">=totla;i++)&#123;</span> </span></div><div class="line"></div><div class="line">     <span class="attr">varp</span>=<span class="string">padding;</span> </div><div class="line"></div><div class="line">     <span class="attr">varimgSrc</span>=<span class="string">'img/'</span>+<span class="attr">i</span>+'<span class="attr">.jpg</span>';</div><div class="line"></div><div class="line">     <span class="attr">if</span>(<span class="attr">i</span>%<span class="attr">4</span>==<span class="string">1)&#123;</span></div><div class="line"></div><div class="line">        <span class="attr">p</span>=<span class="string">0;</span></div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">  <span class="attr">tmpl</span> +=<span class="string">'&lt;li style="width:'</span>+<span class="attr">picWidth</span>+'<span class="attr">px</span>;<span class="attr">height:</span>'+<span class="attr">picWidth</span>+'<span class="attr">px</span>;<span class="attr">padding-left:</span>'+<span class="attr">p</span>+'<span class="attr">px</span>;<span class="attr">padding-top:</span>'+<span class="attr">padding</span>+'<span class="attr">px</span>;"&gt;<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"cvs_'+i+'"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>';</div><div class="line"></div><div class="line">  varimageObj = newImage(); </div><div class="line"></div><div class="line">  imageObj.index = i; </div><div class="line"></div><div class="line">  imageObj.onload = function()&#123;</div><div class="line"></div><div class="line">    varcvs =$('#cvs_'+this.index)[0].getContext('2d');</div><div class="line"></div><div class="line">    cvs.width = this.width;</div><div class="line"></div><div class="line">    cvs.height=this.height;</div><div class="line"></div><div class="line">    cvs.drawImage(this,0,0);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  imageObj.src=imgSrc;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">render();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>#####3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs</p>
<p>zeptojs内置Touch events方法，具体可以看<a href="http://zeptojs.com/#Touch" target="_blank" rel="external">http://zeptojs.com/#Touch</a> events</p>
<p>看了一下zeptio新版的API，已经支持IE10以上浏览器，对zeptojs可以选择使用！</p>
<p>#####4、防止手机中网页放大和缩小。#####</p>
<p>这点是最基本的，最为手机网站开发者来说应该都知道的，就是设置meta中的viewport</p>
<p>还有就是，有些手机网站我们看到如下声明：</p>
<p>代码如下:</p>
<p><code>&lt;!DOCTYPE html PUBLIC &quot;-//WAPFORUM//DTD XHTML Mobile 1.0//EN&quot; &quot;http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;&gt;</code></p>
<p>设置了DTD的方式是XHTML的写法，假如我们页面运用的是html5，可以不用设置DTD,直接声明&lt;!DOCTYPE html&gt;。</p>
<p>使用viewport使页面禁止缩放。 通常把user-scalable设置为0来关闭用户对页面视图缩放的行为。</p>
<p><code>&lt;meta name=&quot;viewport&quot;content=&quot;user-scalable=0&quot;/&gt;</code></p>
<p>但是为了更好的兼容，我们会使用完整的viewport设置。</p>
<p><a href="">复制代码</a>代码如下:</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0&quot; /&gt;</code></p>
<p>当然，<code>user-scalable=0</code>,有的人也写成<code>user-scalable=no</code>，都可以的。</p>
<p>#####5、apple-mobile-web-app-capable#####</p>
<p>apple-mobile-web-app-capable是设置Web应用是否以全屏模式运行。</p>
<p>语法：</p>
<p><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot;content=&quot;yes&quot;&gt;</code></p>
<p>说明：</p>
<p>如果content设置为yes，Web应用会以全屏模式运行，反之，则不会。content的默认值是no，表示正常显示。你可以通过只读属性window.navigator.standalone来确定网页是否以全屏模式显示。</p>
<p>#####6、format-detection#####</p>
<p>format-detection 启动或禁用自动识别页面中的电话号码。</p>
<p>语法：</p>
<p><code>&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no&quot;&gt;</code></p>
<p>说明：</p>
<p>默认情况下，设备会自动识别任何可能是电话号码的字符串。设置telephone=no可以禁用这项功能。</p>
<p>#####7、html5调用安卓或者ios的拨号功能#####</p>
<p>html5提供了自动调用拨号的标签，只要在a标签的href中添加tel:就可以了。</p>
<p>如下：</p>
<p><code>&lt;a href=&quot;tel:4008106999,1034&quot;&gt;400-810-6999 转 1034&lt;/a&gt;</code></p>
<p>拨打手机直接如下</p>
<p><code>&lt;a href=&quot;tel:15677776767&quot;&gt;点击拨打15677776767&lt;/a&gt;</code></p>
<p>#####8、html5GPS定位功能#####</p>
<p>具体请看：<a href="http://www.w3school.com.cn/html5/html_5_geolocation.asp" target="_blank" rel="external">http://www.w3school.com.cn/html5/html_5_geolocation.asp</a></p>
<p>#####9、上下拉动滚动条时卡顿、慢#####</p>
<p><code>body {-webkit-overflow-scrolling: touch; overflow-scrolling: touch;}</code></p>
<p>Android3+和iOS5+支持CSS3的新属性为overflow-scrolling</p>
<p>#####10、禁止复制、选中文本#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Element</span> &#123;<span class="attribute">-webkit-user-select</span>:none;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-user-select</span>:none;</div><div class="line"></div><div class="line">  <span class="attribute">-khtml-user-select</span>:none;</div><div class="line"></div><div class="line">   <span class="attribute">user-select</span>:none;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决移动设备可选中页面文本(视产品需要而定)</p>
<h5 id="11、长时间按住页面出现闪退"><a href="#11、长时间按住页面出现闪退" class="headerlink" title="11、长时间按住页面出现闪退"></a>11、长时间按住页面出现闪退</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">element</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-touch-callout</span>:none;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####12、iphone及ipad下输入框默认内阴影#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Element</span>&#123;</div><div class="line">  <span class="attribute">-webkit-appearance</span>:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####13、ios和android下触摸元素时出现半透明灰色遮罩#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Element</span> &#123;</div><div class="line">  <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(255,255,255,0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置alpha值为0就可以去除半透明灰色遮罩，备注：transparent的属性值在android下无效。</p>
<p>后面一篇文章有详细介绍，地址：<a href="http://www.jb51.net/post/phone_web_ysk" target="_blank" rel="external">http://www.jb51.net/post/phone_web_ysk</a></p>
<p>#####14、active兼容处理 即 伪类 :active 失效#####</p>
<p>方法一：body添加ontouchstart</p>
<p><code>&lt;body ontouchstart=&quot;&quot;&gt;</code></p>
<p>方法二：js给 document 绑定 touchstart 或 touchend 事件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">   a &#123;</div><div class="line">     color:#000;</div><div class="line">   &#125;</div><div class="line">   a:active &#123;</div><div class="line">      color:#fff;</div><div class="line">    &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;a herf=foo &gt;bar&lt;/a&gt;</div><div class="line"> &lt;script&gt;</div><div class="line">    document.addEventListener('touchstart',function()&#123;&#125;,false);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>#####15、动画定义3D启用硬件加速#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Element</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-transform</span>:<span class="built_in">translate3d</span>(0,0,0)</div><div class="line"></div><div class="line">  transform: <span class="built_in">translate3d</span>(0,0,0);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：3D变形会消耗更多的内存与功耗</p>
<p>#####16、Retina屏的1px边框#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Element</span>&#123;</div><div class="line"></div><div class="line">  <span class="attribute">border-width</span>:thin;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####17、webkit mask 兼容处理#####</p>
<p>某些低端手机不支持css3 mask，可以选择性的降级处理。</p>
<p>比如可以使用js判断来引用不同class：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="string">'WebkitMask'</span>indocument.documentElement.style)&#123;</div><div class="line"></div><div class="line">  alert(<span class="string">'支持mask'</span>);</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">  alert(<span class="string">'不支持mask'</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####18、旋转屏幕时，字体大小调整的问题#####</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">p</span>, <span class="selector-tag">div</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-text-size-adjust</span>:<span class="number">100%</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####19、transition闪屏#####</p>
<p>设置内嵌的元素在3D 空间如何呈现：保留3D<br><code>-webkit-transform-style: preserve-3d;</code><br>设置进行转换的元素的背面在面对用户时是否可见：隐藏 /<br><code>-webkit-backface-visibility:hidden;</code></p>
<p>#####20、圆角bug#####</p>
<p>某些Android手机圆角失效</p>
<p><code>background-clip: padding-box;</code></p>
<p>#####21、顶部状态栏背景色#####</p>
<p><code>meta name=&quot;apple-mobile-web-app-status-bar-style&quot;content=&quot;black&quot;/&gt;</code></p>
<p>说明：</p>
<p>除非你先使用apple-mobile-web-app-capable指定全屏模式，否则这个meta标签不会起任何作用。</p>
<p>如果content设置为default，则状态栏正常显示。如果设置为blank，则状态栏会有一个黑色的背景。如果设置为blank-translucent，则状态栏显示为黑色半透明。如果设置为default或blank，则页面显示在状态栏的下方，即状态栏占据上方部分，页面占据下方部分，二者没有遮挡对方或被遮挡。如果设置为blank-translucent，则页面会充满屏幕，其中页面顶部会被状态栏遮盖住（会覆盖页面20px高度，而iphone4和itouch4的Retina屏幕为40px）。默认值是default。</p>
<p>#####22、设置缓存#####</p>
<p><code>&lt;meta http-equiv=&quot;Cache-Control&quot;content=&quot;no-cache&quot;/&gt;</code></p>
<p>手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。</p>
<p>#####23、桌面图标#####</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span><span class="attr">href</span>=<span class="string">"touch-icon-iphone.png"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span><span class="attr">sizes</span>=<span class="string">"76x76"</span><span class="attr">href</span>=<span class="string">"touch-icon-ipad.png"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span><span class="attr">sizes</span>=<span class="string">"120x120"</span><span class="attr">href</span>=<span class="string">"touch-icon-iphone-retina.png"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span><span class="attr">sizes</span>=<span class="string">"152x152"</span><span class="attr">href</span>=<span class="string">"touch-icon-ipad-retina.png"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>iOS下针对不同设备定义不同的桌面图标。如果不定义则以当前屏幕截图作为图标。</p>
<p>上面的写法可能大家会觉得会有默认光泽，下面这种设置方法可以去掉光泽效果，还原设计图的效果！</p>
<p> <code>&lt;link rel=&quot;apple-touch-icon-precomposed&quot;href=&quot;touch-icon-iphone.png&quot;/&gt;</code></p>
<p>图片尺寸可以设定为5757（px）或者Retina可以定为114114（px），ipad尺寸为72*72（px)</p>
<p>#####24、启动画面#####</p>
<p><code>&lt;link rel=&quot;apple-touch-startup-image&quot;href=&quot;start.png&quot;/&gt;</code></p>
<p>iOS下页面启动加载时显示的画面图片，避免加载时的白屏。</p>
<p>可以通过madia来指定不同的大小：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--iPhone--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-320x460.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 320px)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone Retina --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-640x920.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 320px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone 5--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span><span class="attr">media</span>=<span class="string">"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-640x1096.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad portrait--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-768x1004.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: portrait)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad landscape--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-748x1024.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: landscape)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad Retina portrait--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1536x2008.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad Retina landscape--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1496x2048.png"</span><span class="attr">media</span>=<span class="string">"(device-width: 1536px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)"</span><span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>#####25、浏览器私有及其它meta#####</p>
<p>以下属性在项目中没有应用过，可以写一个demo测试以下！</p>
<p>QQ浏览器私有</p>
<p>全屏模式</p>
<p><code>&lt;meta name=&quot;x5-fullscreen&quot;content=&quot;true&quot;&gt;</code></p>
<p>强制竖屏</p>
<p><code>&lt;meta name=&quot;x5-orientation&quot;content=&quot;portrait&quot;&gt;</code></p>
<p>强制横屏</p>
<p><code>&lt;meta name=&quot;x5-orientation&quot;content=&quot;landscape&quot;&gt;</code></p>
<p>应用模式</p>
<p><code>meta name=&quot;x5-page-mode&quot;content=&quot;app&quot;&gt;</code></p>
<p>UC浏览器私有</p>
<p>全屏模式</p>
<p><code>&lt;meta name=&quot;full-screen&quot;content=&quot;yes&quot;&gt;</code></p>
<p>强制竖屏</p>
<p><code>&lt;meta name=&quot;screen-orientation&quot;content=&quot;portrait&quot;&gt;</code></p>
<p>强制横屏</p>
<p><code>&lt;meta name=&quot;screen-orientation&quot;content=&quot;landscape&quot;&gt;</code></p>
<p>应用模式</p>
<p><code>&lt;meta name=&quot;browsermode&quot;content=&quot;application&quot;&gt;</code></p>
<p>其它</p>
<p>针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p>
<p><code>&lt;meta name=&quot;HandheldFriendly&quot;content=&quot;true&quot;&gt;</code></p>
<p>微软的老式浏览器</p>
<p><code>&lt;meta name=&quot;MobileOptimized&quot;content=&quot;320&quot;&gt;</code></p>
<p>windows phone 点击无高光</p>
<p><code>&lt;meta name=&quot;msapplication-tap-highlight&quot;content=&quot;no&quot;&gt;</code></p>
<p>#####26、 IOS中input键盘事件keyup、keydown、keypress支持不是很好#####</p>
<p>问题是这样的，用input search做模糊搜索的时候，在键盘里面输入关键词，会通过ajax后台查询，然后返回数据，然后再对返回的数据进行关键词标红。用input监听键盘keyup事件，在安卓手机浏览器中是可以的，但是在ios手机浏览器中变红很慢，用输入法输入之后，并未立刻相应keyup事件，只有在通过删除之后才能相应！</p>
<p>解决办法：</p>
<p>可以用html5的oninput事件去代替keyup<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"text"</span>id=<span class="string">"testInput"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'testInput'</span>).addEventListener(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    varvalue = e.target.value;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后就达到类似keyup的效果！</p>
<p>#####27、h5网站input 设置为type=number的问题#####</p>
<p>h5网页input 的type设置为number一般会产生三个问题，一个问题是maxlength属性不好用了。另外一个是form提交的时候，默认给取整了。三是部分安卓手机出现样式问题。</p>
<p>问题一解决，我目前用的是js。如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"number"</span>oninput=<span class="string">"checkTextLength(this ,10)"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkTextLength</span>(<span class="params">obj, length</span>) </span>&#123;  </div><div class="line">      <span class="keyword">if</span>(obj.value.length &gt; length)  &#123;     </div><div class="line">        obj.value = obj.value.substr(<span class="number">0</span>, length);  </div><div class="line">      &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>问题二，是因为form提交默认做了表单验证，step默认是1,要设置step属性，假如保留2位小数，写法如下：</p>
<p><code>&lt;input type=&quot;number&quot; step=&quot;0.01&quot;/&gt;</code></p>
<p>关于step，我在这里做简单的介绍，input 中type=number，一般会自动生成一个上下箭头，点击上箭头默认增加一个step，点击下箭头默认会减少一个step。number中默认step是1。也就是step=0.01,可以允许输入2位小数，并且点击上下箭头分别增加0.01和减少0.01。</p>
<p>假如step和min一起使用，那么数值必须在min和max之间。</p>
<p>看下面的例子：</p>
<p><code>&lt;input type=&quot;number&quot;step=&quot;3.1&quot;min=&quot;1&quot;/&gt;</code></p>
<p>输入框可以输入哪些数字？</p>
<p>首先，最小值是1，那么可以输入1.0，第二个是可以输入（1+3.1）那就是4.1,以此类推，每次点击上下箭头都会增加或者减少3.1，输入其他数字无效。这就是step的简单介绍。</p>
<p>问题三，去除input默认样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">-moz-appearance</span>:textfield;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>,</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">-webkit-appearance</span>:none;</div><div class="line"></div><div class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####28、ios 设置input 按钮样式会被默认样式覆盖#####</p>
<p>解决方式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>,</div><div class="line"></div><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span>; </div><div class="line"></div><div class="line">  <span class="attribute">-webkit-appearance</span>: none; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置默认样式为none</p>
<p>#####29、IOS键盘字母输入，默认首字母大写#####</p>
<p>解决方案，设置如下属性</p>
<p><code>&lt;input type=&quot;text&quot;autocapitalize=&quot;off&quot;/&gt;</code></p>
<p>#####30、select 下拉选择设置右对齐#####</p>
<p>设置如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">select</span> <span class="selector-tag">option</span> &#123;</div><div class="line"></div><div class="line">       <span class="attribute">direction</span>: rtl;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象#####</p>
<p>可以设置如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-4deg</span>) <span class="selector-tag">skew</span>(10<span class="selector-tag">deg</span>) <span class="selector-tag">translateZ</span>(0);</div><div class="line"></div><div class="line"> <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-4deg</span>) <span class="selector-tag">skew</span>(10<span class="selector-tag">deg</span>) <span class="selector-tag">translateZ</span>(0);</div><div class="line"></div><div class="line"> <span class="selector-tag">outline</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(255,255,255,0)</div></pre></td></tr></table></figure>
<p>#####32、移动端点击300ms延迟#####</p>
<p>300ms尚可接受，不过因为300ms产生的问题，我们必须要解决。300ms导致用户体验并不是很好，解决这个问题，我们一般在移动端用tap事件来取代click事件。</p>
<p>推荐两个js，一个是fastclick，一个是tap.js</p>
<p>关于300ms延迟，具体请看：<a href="http://thx.github.io/mobile/300ms-click-delay/" target="_blank" rel="external">http://thx.github.io/mobile/300ms-click-delay/</a></p>
<p>#####33、移动端点透问题#####</p>
<p>案例如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"haorooms"</span>&gt;</span>点头事件测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.net"</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>div是绝对定位的蒙层,并且z-index高于a。而a标签是页面中的一个链接，我们给div绑定tap事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#haorooms'</span>).on(<span class="string">'tap'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	$(<span class="string">'#haorooms'</span>).hide();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们点击蒙层时 div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。</p>
<p>原因：</p>
<p>touchstart 早于 touchend 早于click。 亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏， 此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。<br>解决：</p>
<p>（1）尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。<br>（2）用fastclick，<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">https://github.com/ftlabs/fastclick</a><br>（3）用preventDefault阻止a标签的click<br>（4）延迟一定的时间(300ms+)来处理事件 （不推荐）<br>（5）以上一般都能解决，实在不行就换成click事件。<br>下面介绍一下touchend事件，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#haorooms"</span>).on(<span class="string">"touchend"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line"></div><div class="line">   event.preventDefault();</div><div class="line"></div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>#####34、消除 IE10 里面的那个叉号#####</p>
<p><code>input:-ms-clear{display:none;}</code></p>
<p>#####35、关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)#####</p>
<p>iOS 浏览器横屏时会重置字体大小，设置 text-size-adjust 为 none 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 text-size-adjust 为 100% 。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-text-size-adjust</span><span class="selector-pseudo">:100</span>%;</div><div class="line"></div><div class="line"><span class="selector-tag">-ms-text-size-adjust</span><span class="selector-pseudo">:100</span>%;</div><div class="line"></div><div class="line"><span class="selector-tag">text-size-adjust</span><span class="selector-pseudo">:100</span>%;</div></pre></td></tr></table></figure>
<p>#####36、关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格#####</p>
<p>可以通过正则去掉</p>
<p><code>his.value = this.value.replace(/\u2006/g,&#39;&#39;);</code></p>
<p>#####37、移动端 HTML5 audio autoplay 失效问题#####</p>
<p>这个不是 BUG，由于自动播放网页中的音频或视频，会给用户带来一些困扰或者不必要的流量消耗，所以苹果系统和安卓系统通常都会禁止自动播放和使用 JS 的触发播放，必须由用户来触发才可以播放。</p>
<p>解决方法思路：先通过用户 touchstart 触碰，触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。</p>
<p>解决代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'audio'</span>)[<span class="number">0</span>].play();</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'audio'</span>)[<span class="number">0</span>].pause();</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>#####38、移动端 HTML5 input date 不支持 placeholder 问题#####</p>
<p>这个我感觉没有什么好的解决方案，用如下方法</p>
<p><a href="">复制代码</a>代码如下:</p>
<p><code>&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&#39;date&#39;)&quot;  id=&quot;date&quot;&gt;</code></p>
<p>有的浏览器可能要点击两遍！</p>
<p>#####39、部分机型存在type为search的input，自带close按钮样式修改方法#####</p>
<p>有些机型的搜索input控件会自带close按钮（一个伪元素），而通常为了兼容所有浏览器，我们会自己实现一个，此时去掉原生close按钮的方法为</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#Search</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>&#123;</div><div class="line"></div><div class="line">  <span class="attribute">display</span>:none; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想使用原生close按钮，又想使其符合设计风格，可以对这个伪元素的样式进行修改。</p>
<p>#####40、唤起select的option展开#####</p>
<p>zepto方式:</p>
<p><code>$(sltElement).trrgger(&quot;mousedown&quot;);</code></p>
<p>原生js方式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">functionshowDropdown(sltElement) &#123;</div><div class="line"></div><div class="line">  varevent;</div><div class="line"></div><div class="line">  event = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</div><div class="line"></div><div class="line">  event.initMouseEvent(<span class="string">'mousedown'</span>,<span class="literal">true</span>,<span class="literal">true</span>, <span class="built_in">window</span>);</div><div class="line"></div><div class="line">  sltElement.dispatchEvent(event);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>文章转载：<a href="http://www.jb51.net/article/84973.htm" target="_blank" rel="external">http://www.jb51.net/article/84973.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着手机的普及，移动端的开发也成了一个重要的方向，但由于设备的不统一会造成一些兼容性问题，&lt;/p&gt;
&lt;h5 id=&quot;1、安卓浏览器看背景图片，有些设备会模糊。&quot;&gt;&lt;a href=&quot;#1、安卓浏览器看背景图片，有些设备会模糊。&quot; class=&quot;headerlink&quot; title=&quot;1、安卓浏览器看背景图片，有些设备会模糊。&quot;&gt;&lt;/a&gt;1、安卓浏览器看背景图片，有些设备会模糊。&lt;/h5&gt;&lt;p&gt;用同等比例的图片在PC机上很清楚，但是手机上很模糊，原因是什么呢？&lt;/p&gt;
&lt;p&gt;经过研究，是devicePixelRatio作怪，因为手机分辨率太小，如果按照分辨率来显示网页，这样字会非常小，所以苹果当初就把iPhone 4的960 &lt;em&gt; 640分辨率，在网页里只显示了480 &lt;/em&gt; 320，这样devicePixelRatio＝2。现在android比较乱，有1.5的，有2的也有3的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端" scheme="http://loeuy.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6函数新增的特性</title>
    <link href="http://loeuy.cn/ES6%E5%87%BD%E6%95%B0%E6%96%B0%E5%A2%9E%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://loeuy.cn/ES6函数新增的特性/</id>
    <published>2017-06-14T06:09:53.000Z</published>
    <updated>2017-06-14T06:21:47.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数新增特性"><a href="#函数新增特性" class="headerlink" title="函数新增特性"></a>函数新增特性</h1><h2 id="带默认参数的函数"><a href="#带默认参数的函数" class="headerlink" title="带默认参数的函数"></a>带默认参数的函数</h2><blockquote>
<p>JavaScript函数的最大的一个特点就是在传递参数的时候，参数的个数不受限制的。为了健壮性考虑，一般在函数内部需要做一些默认值的处理。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span>(<span class="params">url, timeout, callback</span>) </span>&#123;</div><div class="line">    timeout = timeout || <span class="number">2000</span>;</div><div class="line">    callback = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其实上面的默认值方法有个bug：当timeout是0的时候也会当做假值来处理，从而给赋值默认值2000.</p>
<blockquote>
<p>ES6从语言层面面上增加了 <strong>默认值的</strong> 支持。看下面的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个函数如果只传入第一个参数，后面两个不传入，则会使用默认值。如果后面两个也传入了参数，则不会使用默认值。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span>(<span class="params">url, timeout = <span class="number">2000</span>, callback = function(</span>) </span>&#123;&#125;) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 其余代码</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="默认参数对-arguments-对象的影响"><a href="#默认参数对-arguments-对象的影响" class="headerlink" title="默认参数对 arguments 对象的影响"></a>默认参数对 arguments 对象的影响</h2><blockquote>
<p>在非严格模式下，arguments总是能反映出命名参数的变化。看下面的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="comment">//非严格模式</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//true</span></div><div class="line">        a = <span class="number">10</span>;</div><div class="line">        b = <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//true</span></div><div class="line">    &#125;</div><div class="line">    foo(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>在ES5的严格模式下</strong>，arguments只反映参数的初始值，而不再反映命名参数的变化！</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="comment">//严格模式</span></div><div class="line"><span class="meta">        "use strict"</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//true</span></div><div class="line">        a = <span class="number">10</span>;</div><div class="line">        b = <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//false。  修改a的值不会影响到arguments[0]的值</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//false</span></div><div class="line">    &#125;</div><div class="line">    foo(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>当使用ES6参数默认值的时候，不管是否是在严格模式下，都和ES5的严格模式相同。看下面的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b = <span class="number">30</span></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//true</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//true</span></div><div class="line">        a = <span class="number">10</span>;</div><div class="line">        b = <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]  === a); <span class="comment">//false。  由于b使用了默认值。虽然a没有使用默认值，但是仍然表现的和严格模式一样。</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//false。  b使用了默认值，所以表现的和严格模式一样。</span></div><div class="line">    &#125;</div><div class="line">    foo(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果这样调用foo(1),则 a == 1， b == 30， arguments[0] == 1, arguments[1] == undefined。也就是说默认值并不会赋值给arguments参数。</p>
</blockquote>
<h2 id="默认参数表达式-Default-Parameter-Expressions"><a href="#默认参数表达式-Default-Parameter-Expressions" class="headerlink" title="默认参数表达式 (Default Parameter Expressions)"></a>默认参数表达式 (<strong>Default Parameter Expressions</strong>)</h2><blockquote>
<p>参数的默认值，也可以是一个表达式或者函数调用等。看下面的代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = getValue(</span>)) </span>&#123; <span class="comment">//表示使用getValue这个函数的返回值作为second的默认值。</span></div><div class="line">        <span class="keyword">return</span> first + second;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>));     <span class="comment">// 2.  调用add函数的时候，传入了第二个参数，则以传入的参数为准。</span></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));        <span class="comment">// 6。 调用add函数的时候，没有传入第二个参数，则会调用getValue函数。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>有一点需要要注意：getValue()只会在调用add且不传入第二个参数的时候才会去调用。不是在解析阶段调用的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">let</span> value = <span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = getValue(</span>)) </span>&#123;  <span class="comment">//</span></div><div class="line">        <span class="keyword">return</span> first + second;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>));     <span class="comment">// 2</span></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));        <span class="comment">// 6。 </span></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));        <span class="comment">// 7</span></div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));        <span class="comment">// 8</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>由于默认值可以表达式，所以我们甚至可以使用前面的参数作为后面参数的默认值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = first</span>) </span>&#123;  <span class="comment">// 使用第一个参数作为第二个参数的默认值</span></div><div class="line">        <span class="keyword">return</span> first + second;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：可以把前面的参数作为后面参数的默认值，但是不能把后面的参数作为第一个参数的默认值。这可以前面说的let和const的暂存性死区一个意思。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first = second, second</span>)) </span>&#123;  <span class="comment">// 这种写法是错误的</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> first + second;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未命名参数问题"><a href="#未命名参数问题" class="headerlink" title="未命名参数问题"></a>未命名参数问题</h2><blockquote>
<p>Javascript并不限制传入的参数的数量。在调用函数的时候，传入的实参的个数超过形参的个数的时候，超过的部分就成为了未命名参数。在ES5之前，我们一般可以通过arguments对象来获取到未命名参数的值。但是罗显繁琐。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>])  <span class="comment">//取得传入的多余的参数。</span></div><div class="line">    &#125;</div><div class="line">    foo(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>ES6，提供了一种更加优雅处理未命名参数的问题：<strong>剩余参数</strong>( <strong>Rest Parameters</strong> )</p>
<p>语法：function a(a, … b){ }   </p>
<p>剩余参数使用三个点( … )和变量名来表示。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, ...b</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">        <span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">//true  .多余的参数都被放入了b中。b其实就是一个数组。</span></div><div class="line">    &#125;</div><div class="line">    foo(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>函数最多只能有一个剩余参数b。而且这个剩余参数必须位于参数列表的最后位置。</li>
<li>虽然有了剩余参数，但是arguments仍然存在，但是arguments完全无视了剩余参数的存在。</li>
<li>剩余参数是在函数声明的时候出现的。</li>
</ol>
<h2 id="函数中的扩展运算符"><a href="#函数中的扩展运算符" class="headerlink" title="函数中的扩展运算符"></a>函数中的扩展运算符</h2><blockquote>
<p>例如:Math中的max函数可以返回任意多个参数中的最大值。但是如果这些参数在一个数组中，则没有办法直接传入。以前通用的做法是使用applay方法。</p>
<p>看下面的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]	</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, values));  <span class="comment">// 100</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面这种方法虽然可行，但是总是不是那么直观。</p>
<p>使用ES6提供的扩展运算符可以很容易的解决这个问题。在数组前加前缀 … (三个点)。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values));  <span class="comment">//使用扩展运算符。相当于拆解了数组了。</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values, <span class="number">200</span>));  <span class="comment">//也可以使用扩展运算符和参数的混用，则这个时候就有 5 个数参与比较了。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：剩余参数和扩展运算符都是 使用三个点作为前缀。但是他们使用的位置是不一样的。</strong></p>
<ol>
<li><em>**</em>剩余参数是用在函数的声明的时候的参数列表中，而且必须在参数列表的后面</li>
<li>扩展运算符是用在函数调用的时候作为实参来传递的，在实参中的位置没有限制。</li>
</ol>
</blockquote>
<h1 id="全新的函数：箭头函数（-gt-）"><a href="#全新的函数：箭头函数（-gt-）" class="headerlink" title="全新的函数：箭头函数（=&gt;）"></a>全新的函数：箭头函数（=&gt;）</h1><blockquote>
<p>ECMAScript 6 最有意思的部分之一就是箭头函数。正如其名，箭头函数由 “箭头”（=&gt;）这种新的语法来定义。</p>
<p>其实在别的语言中早就有了这种语法结构，不过他们叫拉姆达表达式。</p>
</blockquote>
<h2 id="箭头函数语法"><a href="#箭头函数语法" class="headerlink" title="箭头函数语法"></a>箭头函数语法</h2><blockquote>
<p>基本语法如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(形参列表)=&gt;&#123;</div><div class="line">  <span class="comment">//函数体</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>箭头函数可以赋值给变量，也可以像匿名函数一样直接作为参数传递。</p>
</blockquote>
<ul>
<li>示例1：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span>&#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(sum(<span class="number">3</span>, <span class="number">4</span>));</div><div class="line">    <span class="comment">//前面的箭头函数等同于下面的传统函数</span></div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">4</span>))</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>如果函数体内只有一行代码，则包裹函数体的 <strong>大括号</strong> ({ })完全可以省略。如果有return，return关键字也可以省略。</p>
<p>如果函数体内有多条语句，则 {} 不能省略。</p>
</blockquote>
<ul>
<li>示例2：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</div><div class="line">    <span class="built_in">console</span>.log(sum(<span class="number">5</span>, <span class="number">4</span>));</div><div class="line">    <span class="comment">//前面的箭头函数等同于下面的传统函数</span></div><div class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">4</span>));</div><div class="line"></div><div class="line">	<span class="comment">//如果这一行代码是没有返回值的，则方法的返回自也是undefined</span></div><div class="line">	<span class="keyword">var</span> foo = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</div><div class="line">	<span class="built_in">console</span>.log(foo(<span class="number">3</span>,<span class="number">4</span>));  <span class="comment">//这个地方的返回值就是undefined</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>如果箭头函数只有一个参数，则包裹参数的小括号可以省略。其余情况下都不可以省略。<strong>当然如果不传入参数也不可以省略</strong></p>
</blockquote>
<ul>
<li>示例3：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="params">a</span>=&gt;</span> a+<span class="number">3</span>; <span class="comment">//因为只有一个参数，所以()可以省略</span></div><div class="line">    <span class="built_in">console</span>.log(foo(<span class="number">4</span>)); <span class="comment">// 7</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>如果想直接返回一个js对象，而且还不想添加传统的大括号和return，则必须给整个对象添加一个<strong>小括号 ()</strong></p>
</blockquote>
<ul>
<li>示例4：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="params">()</span>=&gt;</span>(&#123;<span class="attr">name</span>:<span class="string">"lisi"</span>, <span class="attr">age</span>:<span class="number">30</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.log(foo());</div><div class="line">	<span class="comment">//等同于下面的；</span></div><div class="line">	<span class="keyword">var</span> foo1 = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      	<span class="keyword">return</span> &#123;</div><div class="line">          	<span class="attr">name</span>:<span class="string">"lisi"</span>,</div><div class="line">          	<span class="attr">age</span> : <span class="number">30</span></div><div class="line">      	&#125;;</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用箭头函数实现函数自执行"><a href="#使用箭头函数实现函数自执行" class="headerlink" title="使用箭头函数实现函数自执行"></a>使用箭头函数实现函数自执行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> person = (<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">name</span>: name,</div><div class="line">                <span class="attr">age</span>: <span class="number">30</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    )(<span class="string">"zs"</span>);</div><div class="line">    <span class="built_in">console</span>.log(person);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="箭头函数中无this绑定-No-this-Binding"><a href="#箭头函数中无this绑定-No-this-Binding" class="headerlink" title="箭头函数中无this绑定(No this Binding)"></a>箭头函数中无this绑定(No this Binding)</h2><blockquote>
<p>在ES5之前this的绑定是个比较麻烦的问题，稍不注意就达不到自己想要的效果。因为this的绑定和定义位置无关，只和调用方式有关。</p>
<p><strong>在箭头函数中则没有这样的问题，在箭头函数中，this和定义时的作用域相关，不用考虑调用方式</strong></p>
<p>箭头函数没有 this 绑定，意味着 this 只能通过查找作用域链来确定。<strong>如果箭头函数被另一个不包含箭头函数的函数囊括，那么 this 的值和该函数中的 this 相等，否则 this 的值为 window。</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> PageHandler = &#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">"123456"</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>,</div><div class="line">                event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>); <span class="comment">// 在此处this的和init函数内的this相同。</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Handling "</span> + type + <span class="string">" for "</span> + <span class="keyword">this</span>.id);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    PageHandler.init();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>看下面的一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> p = &#123;</div><div class="line">        <span class="attr">foo</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">//此处this为window</span></div><div class="line">    &#125;</div><div class="line">    p.foo();  <span class="comment">//输出为 window对象。   并不是我想要的。所以在定义对象的方法的时候应该避免使用箭头函数。</span></div><div class="line"><span class="comment">//箭头函数一般用在传递参数，或者在函数内部声明函数的时候使用。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>说明：</p>
</blockquote>
<ol>
<li>箭头函数作为一个使用完就扔的函数，不能作为构造函数使用。也就是不能使用new 的方式来使用箭头函数。</li>
<li>由于箭头函数中的this与函数的作用域相关，所以不能使用call、apply、bind来重新绑定this。但是虽然this不能重新绑定，但是还是可以使用call和apply方法去执行箭头函数的。</li>
</ol>
<h2 id="无arguments绑定"><a href="#无arguments绑定" class="headerlink" title="无arguments绑定"></a>无arguments绑定</h2><blockquote>
<p>虽然箭头函数没有自己的arguments对象，但是在箭头函数内部还是可以使用它外部函数的arguments对象的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//这里的arguments是foo函数的arguments对象。箭头函数自己是没有 arguments 对象的。</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">arguments</span>[<span class="number">0</span>]; <span class="comment">//箭头函数的返回值是foo函数的第一个参数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> arrow = foo(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">    <span class="built_in">console</span>.log(arrow()); <span class="comment">// 4</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数新增特性&quot;&gt;&lt;a href=&quot;#函数新增特性&quot; class=&quot;headerlink&quot; title=&quot;函数新增特性&quot;&gt;&lt;/a&gt;函数新增特性&lt;/h1&gt;&lt;h2 id=&quot;带默认参数的函数&quot;&gt;&lt;a href=&quot;#带默认参数的函数&quot; class=&quot;headerlink&quot; title=&quot;带默认参数的函数&quot;&gt;&lt;/a&gt;带默认参数的函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript函数的最大的一个特点就是在传递参数的时候，参数的个数不受限制的。为了健壮性考虑，一般在函数内部需要做一些默认值的处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeRequest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url, timeout, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    timeout = timeout || &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    callback = callback || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://loeuy.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6块级作用域</title>
    <link href="http://loeuy.cn/ES6%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://loeuy.cn/ES6块级作用域/</id>
    <published>2017-06-14T05:51:45.000Z</published>
    <updated>2017-06-14T06:21:56.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块级作用域绑定"><a href="#块级作用域绑定" class="headerlink" title="块级作用域绑定"></a>块级作用域绑定</h2><blockquote>
<p>在ES5之前，不存在块级作用域，在编程的时候很多时候会带来很多的不便，ES6新增了块级作用域，补足了这方面的缺陷。</p>
</blockquote>
<p>块级声明指的是该声明的变量无法被代码块外部访问。块作用域，又被称为词法作用域（lexical scopes），可以在如下的条件下创建：</p>
<ul>
<li>函数内部</li>
<li>在代码块（即 {  }）内部</li>
</ul>
<p>块级作用域是很多类C语言的工作机制，ECMAScript 6 引入块级声明的目的是增强 JavaScript 的灵活性，同时又能与其它编程语言保持一致。</p>
<a id="more"></a>
<h2 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h2><blockquote>
<p>使用let声明变量的语法和使用var声明的语法是一样的。<strong>但是let声明的变量的作用域会限制在当前的代码块中。这是let与var的最大区别</strong>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">if</span>(a &gt; <span class="number">5</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(b); <span class="comment">//用let声明的变量没有声明提前这一特性，所以此处也访问不到（报错）</span></div><div class="line">        <span class="keyword">let</span> b = <span class="number">20</span>;</div><div class="line">        <span class="built_in">console</span>.log(b);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(b); <span class="comment">//由于b是在if块中使用let声明的，所以此处无法访问到。（报错）</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>用 let 声明的变量具有块级作用域，只能在声明的块中访问，在块外面无法访问</li>
<li>用let声明的变量也没有声明提前这一特性。</li>
<li>在同一个块中，let声明的变量也不能重复声明。</li>
<li>在声明变量的时候尽量使用let，慢慢的抛弃var</li>
</ol>
<h2 id="const声明-Constant-Declarations"><a href="#const声明-Constant-Declarations" class="headerlink" title="const声明(Constant Declarations)"></a>const声明(Constant Declarations)</h2><blockquote>
<p>在  ES6 使用const来声明的变量称之为常量。这意味着它们不能再次被赋值。由于这个原因，所有的 const 声明的变量都必须在声明处初始化。const声明的常量和let变量一样也是具有块级作用域的特性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">const</span> b = <span class="number">20</span>;</div><div class="line">        b = <span class="number">30</span>;  <span class="comment">//错误! 常量不能重新赋值</span></div><div class="line">        <span class="keyword">const</span> c; <span class="comment">//错误！ 常量声明的同时必须赋值。</span></div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>const的特性除了声明的是常量为，其他与let一样。</li>
<li>在let和const声明前的这段区域称之为暂存性死区（<strong>The Temporal Dead Zone</strong> —TDZ)。</li>
<li>使用let和const声明的变量和常量不再是window的属性。  也就是说通过window.a是无法访问到的。</li>
</ol>
<h2 id="循环中的块级绑定"><a href="#循环中的块级绑定" class="headerlink" title="循环中的块级绑定"></a>循环中的块级绑定</h2><blockquote>
<p>使用var声明的循环变量在循环结束后仍然可以访问到。   使用let声明的循环变量，在循环结束之后会立即销毁。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123; <span class="comment">// 循环结束之后会立即销毁 i</span></div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(i);  <span class="comment">//此处无法访问到 i 。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="循环中的函数"><a href="#循环中的函数" class="headerlink" title="循环中的函数"></a>循环中的函数</h2><blockquote>
<p>看下面的代码，是输出10个10，而不是0，1，2，…</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> funcs = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line">        func();     <span class="comment">// 输出 "10" 共10次</span></div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>解决办法需要使用函数的自执行特性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    funcs.push((<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(value);</div><div class="line">        &#125;</div><div class="line">    &#125;(i)));</div><div class="line">&#125;</div><div class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    func();     <span class="comment">// 输出 0，1，2 ... 9</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>如果使用let声明变量，则完全可以避免前面的问题。 这是ES6规范中专门定义的特性。在for … in和for … of循环中也适用</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> funcs = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        funcs.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</div><div class="line">        func();     <span class="comment">// 输出 0，1，2 ... 9</span></div><div class="line">    &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>说明：</p>
</blockquote>
<ol>
<li>let 声明使得每次迭代都会创建一个变量 i，所以循环内部创建的函数会获得各自的变量 i 的拷贝。每份拷贝都会在每次迭代的开始被创建并被赋值。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;块级作用域绑定&quot;&gt;&lt;a href=&quot;#块级作用域绑定&quot; class=&quot;headerlink&quot; title=&quot;块级作用域绑定&quot;&gt;&lt;/a&gt;块级作用域绑定&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在ES5之前，不存在块级作用域，在编程的时候很多时候会带来很多的不便，ES6新增了块级作用域，补足了这方面的缺陷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;块级声明指的是该声明的变量无法被代码块外部访问。块作用域，又被称为词法作用域（lexical scopes），可以在如下的条件下创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数内部&lt;/li&gt;
&lt;li&gt;在代码块（即 {  }）内部&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;块级作用域是很多类C语言的工作机制，ECMAScript 6 引入块级声明的目的是增强 JavaScript 的灵活性，同时又能与其它编程语言保持一致。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://loeuy.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://loeuy.cn/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://loeuy.cn/Flex布局/</id>
    <published>2017-06-05T09:07:50.000Z</published>
    <updated>2017-06-14T06:22:05.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为 Flex 布局。</p>
<a id="more"></a>
<h3 id="定义容器的display属性"><a href="#定义容器的display属性" class="headerlink" title="定义容器的display属性"></a>定义容器的display属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  	<span class="attribute">display</span>: -webkit-flex;</div><div class="line">  	<span class="attribute">dispaly</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*行内样式*/</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  	<span class="attribute">display</span>: -webkit-inline-flex;</div><div class="line">  	<span class="attribute">display</span>: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容器样式"><a href="#容器样式" class="headerlink" title="容器样式"></a>容器样式</h3><p><strong>主轴方向（flex-direction）</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>row</td>
<td>左到右（默认）</td>
</tr>
<tr>
<td>row-reverse</td>
<td>右到左</td>
</tr>
<tr>
<td>column</td>
<td>上到下</td>
</tr>
<tr>
<td>column-reverse</td>
<td>下到上</td>
</tr>
</tbody>
</table>
<p><strong>换行（flex-wrap）</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>nowrap</td>
<td>不换行（默认）</td>
</tr>
<tr>
<td>wrap</td>
<td>换行</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>换行并第一行在下方</td>
</tr>
</tbody>
</table>
<p><strong>主轴方向和换行简写</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flew-flow:&lt;flex-direction&gt;||&lt;flex-wrap&gt;</div></pre></td></tr></table></figure>
<p><strong>主轴对齐方式（justify-content）</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>左对齐（默认）</td>
</tr>
<tr>
<td>flex-end</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>space-between</td>
<td>两端对齐</td>
</tr>
<tr>
<td>space-around</td>
<td>平均分布</td>
</tr>
</tbody>
</table>
<p><strong>交叉轴对齐方式（align-items）</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>顶部对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>底部对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>baseline</td>
<td>文本基线对齐</td>
</tr>
<tr>
<td>stretch</td>
<td>如果项目未设置高度或设为auto，将占满整个容器的高度。（默认）</td>
</tr>
</tbody>
</table>
<h3 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h3><p><strong>排序（order：<number>）</number></strong>：排序，数值越小，越排前，默认为0</p>
<p><strong>放大（flex-grow: <number>）</number></strong>：放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）</p>
<p><strong>缩小（flex-shrink:<number>）</number></strong>：缩小：如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p>
<p><strong>固定大小（flex-basis:<length> | auto）</length></strong>:固定大小：默认为0，可以设置px值，也可以设置百分比大小</p>
<p><strong>flex:none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</strong>：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。</p>
<p><strong>单独对齐方式（align-self）</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>自动（默认）</td>
</tr>
<tr>
<td>flex-start</td>
<td>顶部对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>底部对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>baseline</td>
<td>文本基线对齐</td>
</tr>
<tr>
<td>stretch</td>
<td>上下对齐并铺满</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flex布局是什么？&quot;&gt;&lt;a href=&quot;#Flex布局是什么？&quot; class=&quot;headerlink&quot; title=&quot;Flex布局是什么？&quot;&gt;&lt;/a&gt;Flex布局是什么？&lt;/h2&gt;&lt;p&gt;Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
&lt;p&gt;任何一个容器都可以指定为 Flex 布局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css3" scheme="http://loeuy.cn/tags/css3/"/>
    
  </entry>
  
</feed>
